'use client';

import { useState, useEffect } from 'react';
import { FaRegTimesCircle, FaTrash } from 'react-icons/fa';
import styles from './DeliveryCart.module.css';
import { useDeliveryCart } from '@/hooks/useDeliveryCart';
import { useOrders } from '@/hooks/useOrders';
import { AddItemForm } from './AddItemForm';
import { DeliveryForm } from './DeliveryForm';
import { useRouter } from 'next/navigation';

interface OrderItem {
  id: string;
  marketplace: string;
  link: string;
  quantity: number;
  size?: string;
  color?: string;
  notes?: string;
}

interface DeliveryDetails {
  address: string;
  date: string;
  time: string;
  notes: string;
}

export function DeliveryCart() {
  const router = useRouter();
  const [mounted, setMounted] = useState(false);
  const { 
    items, 
    addItem,
    removeItem, 
    updateQuantity, 
    clearCart,
    totalItems,
    uniqueMarketplaces
  } = useDeliveryCart();
  const { addOrder } = useOrders();

  const [showAddForm, setShowAddForm] = useState(false);
  const [showDeliveryForm, setShowDeliveryForm] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []);

  if (!mounted) {
    return null;
  }

  const handleSubmitDelivery = async (details: DeliveryDetails) => {
    try {
      setIsSubmitting(true);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
      const order = addOrder(items, details);
      console.log('Order submitted:', order);
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ä–≤–µ—Ä–∞
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
      clearCart();
      setShowDeliveryForm(false);
      
      alert('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!');
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è
      router.push('/profile');
    } catch (error) {
      console.error('Error submitting order:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    } finally {
      setIsSubmitting(false);
    }
  };

  if (showAddForm) {
    return (
      <AddItemForm
        onAdd={(item: Omit<OrderItem, 'id'>) => {
          addItem(item);
          setShowAddForm(false);
        }}
        onCancel={() => setShowAddForm(false)}
      />
    );
  }

  if (showDeliveryForm) {
    return (
      <DeliveryForm
        onSubmit={handleSubmitDelivery}
        onCancel={() => setShowDeliveryForm(false)}
        totalItems={totalItems}
        uniqueMarketplaces={uniqueMarketplaces}
      />
    );
  }

  if (items.length === 0) {
    return (
      <div className={styles.emptyCart}>
        <div className={styles.emptyCartIcon}>üõí</div>
        <h3>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</h3>
        <p>–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏</p>
        <button 
          className={styles.addButton}
          onClick={() => setShowAddForm(true)}
        >
          –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
        </button>
      </div>
    );
  }

  return (
    <div className={styles.cartContainer}>
      <div className={styles.cartHeader}>
        <div className={styles.cartStats}>
          <div className={styles.statItem}>
            <span className={styles.statLabel}>–¢–æ–≤–∞—Ä–æ–≤:</span>
            <span className={styles.statValue}>{totalItems}</span>
          </div>
          <div className={styles.statItem}>
            <span className={styles.statLabel}>–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤:</span>
            <span className={styles.statValue}>{uniqueMarketplaces}</span>
          </div>
        </div>
        <button 
          className={styles.clearCartButton}
          onClick={clearCart}
          disabled={isSubmitting}
        >
          <FaTrash />
          <span>–û—á–∏—Å—Ç–∏—Ç—å</span>
        </button>
      </div>

      <div className={styles.cartItems}>
        {items.map(item => (
          <div key={item.id} className={styles.cartItem}>
            <div className={styles.itemInfo}>
              <div className={styles.itemHeader}>
                <span className={styles.marketplace}>{item.marketplace}</span>
                <div className={styles.itemAttributes}>
                  {item.size && <span className={styles.attribute}>–†–∞–∑–º–µ—Ä: {item.size}</span>}
                  {item.color && <span className={styles.attribute}>–¶–≤–µ—Ç: {item.color}</span>}
                </div>
              </div>
              <div className={styles.itemLink}>{item.link}</div>
              {item.notes && (
                <div className={styles.itemNotes}>
                  <span className={styles.notesLabel}>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</span>
                  {item.notes}
                </div>
              )}
            </div>
            
            <div className={styles.itemActions}>
              <div className={styles.quantityControls}>
                <button 
                  onClick={() => updateQuantity(item.id, -1)}
                  className={styles.quantityButton}
                  disabled={item.quantity <= 1 || isSubmitting}
                >
                  -
                </button>
                <span className={styles.quantity}>{item.quantity}</span>
                <button 
                  onClick={() => updateQuantity(item.id, 1)}
                  className={styles.quantityButton}
                  disabled={isSubmitting}
                >
                  +
                </button>
              </div>
              <button 
                onClick={() => removeItem(item.id)}
                className={styles.removeButton}
                title="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä"
                disabled={isSubmitting}
              >
                <FaRegTimesCircle />
              </button>
            </div>
          </div>
        ))}
      </div>

      <div className={styles.cartFooter}>
        <button 
          className={styles.addMoreButton}
          onClick={() => setShowAddForm(true)}
          disabled={isSubmitting}
        >
          –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë
        </button>
        <button 
          className={`${styles.proceedButton} ${isSubmitting ? styles.loading : ''}`}
          onClick={() => setShowDeliveryForm(true)}
          disabled={isSubmitting}
        >
          –û—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É
        </button>
      </div>
    </div>
  );
} 